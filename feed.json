{
    "version": "https://jsonfeed.org/version/1",
    "title": "Lystics",
    "subtitle": "",
    "icon": "https://lysistic.github.io/assets/favicon.ico",
    "description": "",
    "home_page_url": "https://lysistic.github.io",
    "items": [
        {
            "id": "https://lysistic.github.io/2024/03/03/hello-world/",
            "url": "https://lysistic.github.io/2024/03/03/hello-world/",
            "title": "Hello World",
            "date_published": "2024-03-02T18:01:38.910Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        },
        {
            "id": "https://lysistic.github.io/2024/03/03/git-learn/",
            "url": "https://lysistic.github.io/2024/03/03/git-learn/",
            "title": "git-learn",
            "date_published": "2024-03-02T16:14:01.000Z",
            "content_html": "<p>WorkSpace: 工作区  index/Stage: 暂存区 Repository: 仓库区 Remote: 远程仓库</p>\n<h2 id=\"git-init-初始化\"><a class=\"anchor\" href=\"#git-init-初始化\">#</a>  <code>git init 初始化</code></h2>\n<p>.git  Git 用来跟踪管理版本</p>\n<p><code>git add readme.txt 添加文本</code></p>\n<p><code>git commit -m 'hello world'</code></p>\n<p><code>git status 查看是否还有文件未提交</code></p>\n<p><code>git diff readme.txt 查看修改</code></p>\n<p><code>git log 查看历史日志</code></p>\n<p><code>git log -pretty=oneline 单行显示</code></p>\n<h2 id=\"版本回退\"><a class=\"anchor\" href=\"#版本回退\">#</a> 版本回退</h2>\n<p><code>git reset --hard HEAD^ 回退一个版本</code></p>\n<p><code>git reset --hard HEAD^^ 回退两个版本</code></p>\n<p><code>git reset --hard HEAD~100 回退到前100个版本</code></p>\n<p><code>git reset --hard 版本号</code></p>\n<p><code>git reflog 获取各个版本版本号</code></p>\n<ul>\n<li>工作区：就是你在电脑上看到的目录，比如目录下 testgit 里的文件 (.git 隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。</li>\n<li>版本库 (Repository)：工作区有一个隐藏目录.git, 这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是 stage (暂存区)，还有 Git 为我们自动创建了第一个分支 master, 以及指向 master 的一个指针 HEAD。</li>\n</ul>\n<p><code>git commit 一次性提交</code></p>\n<p><code>git checkout --filename </code></p>\n<p><code>eg: git checkout --readme.txt 撤销提交</code></p>\n<p><code>git checkout --file_deleted 恢复被撤销的文件</code></p>\n<p><code>git remote add origin url</code></p>\n<p><code>git push -u origin master 推送本地仓库master分支</code></p>\n<p><code>先本地commit 再 git push origin master</code></p>\n<p><code>git clone url</code></p>\n<p><code>git checkout -b dev 创建并切换分支</code></p>\n<p><code>git branch 查看当前分支</code></p>\n<p>-b 参数表示切换</p>\n<p>创建分支</p>\n<p><code>git branch dev</code></p>\n<p>切换分支</p>\n<p><code>git checkout dev</code></p>\n<p><code>git merge dev 合并指定分支到主分支上</code></p>\n<p><code>git branch -d dev</code>  删除 dev 分支</p>\n<p>conclusion</p>\n<ul>\n<li>\n<p><code>查看分支 git branch</code></p>\n</li>\n<li>\n<p><code>创建分支 git branch name</code></p>\n</li>\n<li>\n<p><code>切换分支 git checkout name</code></p>\n</li>\n<li>\n<p><code>创建+切换分支 git checkout -b name</code></p>\n</li>\n<li>\n<p><code>合并某分支到当前分支 git merge name</code></p>\n</li>\n<li>\n<p><code>删除分支 git branch -d name</code></p>\n</li>\n<li>\n<p><code>git merge --no-ff -m &quot;eaewea with no-ff&quot; dev 禁用fast forward</code></p>\n</li>\n<li>\n<p><code>git log --graph --pretty=oneline --abbrev-commit</code>  是一个 Git 命令，用于查看提交历史，并以图形化的方式显示提交历史，并指定了显示格式和提交 ID 的缩写。</p>\n<p>解读这个命令的各个参数：</p>\n<ul>\n<li><code>git log</code> : 显示提交历史记录。</li>\n<li><code>--graph</code> : 使用图形化的方式显示提交历史。这会在输出中添加一些字符来表示提交历史的分支和合并关系，使其更易于理解。</li>\n<li><code>--pretty=oneline</code> : 指定输出格式为单行显示。这会以紧凑的方式显示提交历史，每个提交占据一行，每行显示一个提交的摘要信息。</li>\n<li><code>--abbrev-commit</code> : 缩写提交 ID。这会使提交 ID 的长度缩短，只显示前几个字符，以提高显示的紧凑性和可读性。</li>\n</ul>\n</li>\n<li>\n<p><code>git stash 将当前工作现场隐藏起来</code></p>\n</li>\n<li>\n<p><code>git status</code>  是干净的</p>\n</li>\n<li>\n<p><code>git checkout -b filename 创建bug修复分支</code></p>\n</li>\n<li>\n<p>bug 修复后，切换到 master 分支，完成合并，再删除 bug 修复分支</p>\n</li>\n<li>\n<p><code>git stash list</code></p>\n</li>\n<li>\n<p><code>git stash apply 恢复</code></p>\n</li>\n<li>\n<p><code>git stash drop 删除</code></p>\n</li>\n<li>\n<p><code>或者直接 git stash pop 恢复的同时删除</code></p>\n</li>\n<li>\n<p><code>git remote 查看远程仓库的信息</code></p>\n</li>\n<li>\n<p><code>git remote -v 查看远程仓库的详细信息</code></p>\n</li>\n<li>\n<p><code>git push origin master</code></p>\n</li>\n<li>\n<p><code>git push origin dev 推送不同分支 多台机器合作</code></p>\n</li>\n<li>\n<p><code>git branch --set-upsteam dev origin/dev 指定本地dev分支与远程origin/dev分支的联系</code></p>\n</li>\n<li>\n<p>[<a href=\"https://www.cnblogs.com/tugenhua0707/p/4050072.html\">Git 使用教程 - 龙恩 0707 - 博客园 (cnblogs.com)</a>](<a href=\"https://www.cnblogs.com/tugenhua0707/p/4050072.html\">https://www.cnblogs.com/tugenhua0707/p/4050072.html</a>)</p>\n</li>\n</ul>\n<p><a href=\"https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\">常用 Git 命令清单 - 阮一峰的网络日志 (ruanyifeng.com)</a></p>\n<pre><code>一、新建代码库\n\n# 在当前目录新建一个Git代码库\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init [project-name] # 下载一个项目和它的整个代码历史\n$ git clone [url]\n\n二、配置\n# 显示当前的Git配置\n$ git config --list\n\n# 编辑Git配置文件\n$ git config -e [--global] # 设置提交代码时的用户信息\n$ git config [--global] user.name &quot;[name]&quot;\n$ git config [--global] user.email &quot;[email address]&quot;\n\n三、增加/删除文件\n# 添加指定文件到暂存区\n$ git add [file1] [file2] ... # 添加指定目录到暂存区，包括子目录\n$ git add [dir] # 添加当前目录的所有文件到暂存区\n$ git add . # 添加每个变化前，都会要求确认 # 对于同一个文件的多处变化，可以实现分次提交\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm [file1] [file2] ... # 停止追踪指定文件，但该文件会保留在工作区\n$ git rm --cached [file] # 改名文件，并且将这个改名放入暂存区\n$ git mv [file-original] [file-renamed]\n\n四、代码提交\n# 提交暂存区到仓库区\n$ git commit -m [message] # 提交暂存区的指定文件到仓库区\n$ git commit [file1] [file2] ... -m [message] # 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit -a\n\n# 提交时显示所有diff信息\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit --amend -m [message] # 重做上一次commit，并包括指定文件的新变化\n$ git commit --amend [file1] [file2] ...\n\n五、分支\n# 列出所有本地分支\n$ git branch\n\n# 列出所有远程分支\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch [branch-name] # 新建一个分支，并切换到该分支\n$ git checkout -b [branch] # 新建一个分支，指向指定commit\n$ git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch --track [branch] [remote-branch] # 切换到指定分支，并更新工作区\n$ git checkout [branch-name] # 切换到上一个分支\n$ git checkout - # 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch --set-upstream [branch] [remote-branch] # 合并指定分支到当前分支\n$ git merge [branch] # 选择一个commit，合并进当前分支\n$ git cherry-pick [commit] # 删除分支\n$ git branch -d [branch-name] # 删除远程分支\n$ git push origin --delete [branch-name]\n$ git branch -dr [remote/branch]\n\n六、标签\n# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag [tag] # 新建一个tag在指定commit\n$ git tag [tag] [commit] # 删除本地tag\n$ git tag -d [tag] # 删除远程tag\n$ git push origin :refs/tags/[tagName] # 查看tag信息\n$ git show [tag] # 提交指定tag\n$ git push [remote] [tag] # 提交所有tag\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n$ git checkout -b [branch] [tag]\n\n七、查看信息\n# 显示有变更的文件\n$ git status\n\n# 显示当前分支的版本历史\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n$ git log -S [keyword] # 显示某个commit之后的所有变动，每个commit占据一行\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log --follow [file]\n$ git whatchanged [file] # 显示指定文件相关的每一次diff\n$ git log -p [file] # 显示过去5次提交\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame [file] # 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff --cached [file] # 显示工作区与当前分支最新commit之间的差异\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n$ git diff [first-branch]...[second-branch] # 显示今天你写了多少行代码\n$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot; # 显示某次提交的元数据和内容变化\n$ git show [commit] # 显示某次提交发生变化的文件\n$ git show --name-only [commit] # 显示某次提交时，某个文件的内容\n$ git show [commit]:[filename] # 显示当前分支的最近几次提交\n$ git reflog\n\n八、远程同步\n# 下载远程仓库的所有变动\n$ git fetch [remote] # 显示所有远程仓库\n$ git remote -v\n\n# 显示某个远程仓库的信息\n$ git remote show [remote] # 增加一个新的远程仓库，并命名\n$ git remote add [shortname] [url] # 取回远程仓库的变化，并与本地分支合并\n$ git pull [remote] [branch] # 上传本地指定分支到远程仓库\n$ git push [remote] [branch] # 强行推送当前分支到远程仓库，即使有冲突\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n$ git push [remote] --all\n\n九、撤销\n# 恢复暂存区的指定文件到工作区\n$ git checkout [file] # 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout [commit] [file] # 恢复暂存区的所有文件到工作区\n$ git checkout . # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset [file] # 重置暂存区与工作区，与上一次commit保持一致\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset [commit] # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset --hard [commit] # 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n$ git reset --keep [commit] # 新建一个commit，用来撤销指定commit # 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert [commit] # 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://lysistic.github.io/2024/02/12/my-first-article/",
            "url": "https://lysistic.github.io/2024/02/12/my-first-article/",
            "title": "my first article",
            "date_published": "2024-02-12T10:14:24.000Z",
            "content_html": "<h2 id=\"this-is-my-first-blog\"><a class=\"anchor\" href=\"#this-is-my-first-blog\">#</a> This is my first blog.</h2>\n<ul>\n<li>Hello World！</li>\n</ul>\n",
            "tags": []
        }
    ]
}