<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Lystics</title>
        <subtitle></subtitle>
        <icon>https://lysistic.github.io/assets/favicon.ico</icon>
        <link>https://lysistic.github.io</link>
        <author>
          <name>lystics</name>
        </author>
        <description></description>
        <language>zh</language>
        <pubDate>Sun, 03 Mar 2024 02:01:38 +0800</pubDate>
        <lastBuildDate>Sun, 03 Mar 2024 02:01:38 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://lysistic.github.io/2024/03/03/hello-world/</guid>
            <title>Hello World</title>
            <link>https://lysistic.github.io/2024/03/03/hello-world/</link>
            <pubDate>Sun, 03 Mar 2024 02:01:38 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;a href=&#34;https://hexo.io/&#34;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&#34;https://hexo.io/docs/&#34;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&#34;https://hexo.io/docs/troubleshooting.html&#34;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&#34;https://github.com/hexojs/hexo/issues&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo new &lt;span class=&#34;token string&#34;&gt;&#34;My New Post&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/writing.html&#34;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo server&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/server.html&#34;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo generate&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/generating.html&#34;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;span&gt;h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ hexo deploy&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;More info: &lt;a href=&#34;https://hexo.io/docs/one-command-deployment.html&#34;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://lysistic.github.io/2024/03/03/git-learn/</guid>
            <title>git-learn</title>
            <link>https://lysistic.github.io/2024/03/03/git-learn/</link>
            <pubDate>Sun, 03 Mar 2024 00:14:01 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;WorkSpace: 工作区  index/Stage: 暂存区 Repository: 仓库区 Remote: 远程仓库&lt;/p&gt;
&lt;h2 id=&#34;git-init-初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#git-init-初始化&#34;&gt;#&lt;/a&gt;  &lt;code&gt;git init 初始化&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;.git  Git 用来跟踪管理版本&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git add readme.txt 添加文本&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git commit -m &#39;hello world&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git status 查看是否还有文件未提交&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git diff readme.txt 查看修改&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log 查看历史日志&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git log -pretty=oneline 单行显示&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;版本回退&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#版本回退&#34;&gt;#&lt;/a&gt; 版本回退&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git reset --hard HEAD^ 回退一个版本&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reset --hard HEAD^^ 回退两个版本&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reset --hard HEAD~100 回退到前100个版本&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reset --hard 版本号&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git reflog 获取各个版本版本号&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;工作区：就是你在电脑上看到的目录，比如目录下 testgit 里的文件 (.git 隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴。&lt;/li&gt;
&lt;li&gt;版本库 (Repository)：工作区有一个隐藏目录.git, 这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是 stage (暂存区)，还有 Git 为我们自动创建了第一个分支 master, 以及指向 master 的一个指针 HEAD。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;git commit 一次性提交&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout --filename &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eg: git checkout --readme.txt 撤销提交&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout --file_deleted 恢复被撤销的文件&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git remote add origin url&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push -u origin master 推送本地仓库master分支&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;先本地commit 再 git push origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone url&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout -b dev 创建并切换分支&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git branch 查看当前分支&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;-b 参数表示切换&lt;/p&gt;
&lt;p&gt;创建分支&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git branch dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;切换分支&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout dev&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git merge dev 合并指定分支到主分支上&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git branch -d dev&lt;/code&gt;  删除 dev 分支&lt;/p&gt;
&lt;p&gt;conclusion&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;查看分支 git branch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;创建分支 git branch name&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;切换分支 git checkout name&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;创建+切换分支 git checkout -b name&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;合并某分支到当前分支 git merge name&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;删除分支 git branch -d name&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git merge --no-ff -m &amp;quot;eaewea with no-ff&amp;quot; dev 禁用fast forward&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git log --graph --pretty=oneline --abbrev-commit&lt;/code&gt;  是一个 Git 命令，用于查看提交历史，并以图形化的方式显示提交历史，并指定了显示格式和提交 ID 的缩写。&lt;/p&gt;
&lt;p&gt;解读这个命令的各个参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt; : 显示提交历史记录。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--graph&lt;/code&gt; : 使用图形化的方式显示提交历史。这会在输出中添加一些字符来表示提交历史的分支和合并关系，使其更易于理解。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--pretty=oneline&lt;/code&gt; : 指定输出格式为单行显示。这会以紧凑的方式显示提交历史，每个提交占据一行，每行显示一个提交的摘要信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--abbrev-commit&lt;/code&gt; : 缩写提交 ID。这会使提交 ID 的长度缩短，只显示前几个字符，以提高显示的紧凑性和可读性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git stash 将当前工作现场隐藏起来&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git status&lt;/code&gt;  是干净的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git checkout -b filename 创建bug修复分支&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;bug 修复后，切换到 master 分支，完成合并，再删除 bug 修复分支&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git stash list&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git stash apply 恢复&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git stash drop 删除&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;或者直接 git stash pop 恢复的同时删除&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git remote 查看远程仓库的信息&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git remote -v 查看远程仓库的详细信息&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git push origin master&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git push origin dev 推送不同分支 多台机器合作&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git branch --set-upsteam dev origin/dev 指定本地dev分支与远程origin/dev分支的联系&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[&lt;a href=&#34;https://www.cnblogs.com/tugenhua0707/p/4050072.html&#34;&gt;Git 使用教程 - 龙恩 0707 - 博客园 (cnblogs.com)&lt;/a&gt;](&lt;a href=&#34;https://www.cnblogs.com/tugenhua0707/p/4050072.html&#34;&gt;https://www.cnblogs.com/tugenhua0707/p/4050072.html&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html&#34;&gt;常用 Git 命令清单 - 阮一峰的网络日志 (ruanyifeng.com)&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一、新建代码库

# 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name] # 下载一个项目和它的整个代码历史
$ git clone [url]

二、配置
# 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global] # 设置提交代码时的用户信息
$ git config [--global] user.name &amp;quot;[name]&amp;quot;
$ git config [--global] user.email &amp;quot;[email address]&amp;quot;

三、增加/删除文件
# 添加指定文件到暂存区
$ git add [file1] [file2] ... # 添加指定目录到暂存区，包括子目录
$ git add [dir] # 添加当前目录的所有文件到暂存区
$ git add . # 添加每个变化前，都会要求确认 # 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ... # 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file] # 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]

四、代码提交
# 提交暂存区到仓库区
$ git commit -m [message] # 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message] # 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交 # 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message] # 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...

五、分支
# 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name] # 新建一个分支，并切换到该分支
$ git checkout -b [branch] # 新建一个分支，指向指定commit
$ git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch] # 切换到指定分支，并更新工作区
$ git checkout [branch-name] # 切换到上一个分支
$ git checkout - # 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch] # 合并指定分支到当前分支
$ git merge [branch] # 选择一个commit，合并进当前分支
$ git cherry-pick [commit] # 删除分支
$ git branch -d [branch-name] # 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]

六、标签
# 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag] # 新建一个tag在指定commit
$ git tag [tag] [commit] # 删除本地tag
$ git tag -d [tag] # 删除远程tag
$ git push origin :refs/tags/[tagName] # 查看tag信息
$ git show [tag] # 提交指定tag
$ git push [remote] [tag] # 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]

七、查看信息
# 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword] # 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其&amp;quot;提交说明&amp;quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file] # 显示指定文件相关的每一次diff
$ git log -p [file] # 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file] # 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file] # 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch] # 显示今天你写了多少行代码
$ git diff --shortstat &amp;quot;@&amp;#123;0 day ago&amp;#125;&amp;quot; # 显示某次提交的元数据和内容变化
$ git show [commit] # 显示某次提交发生变化的文件
$ git show --name-only [commit] # 显示某次提交时，某个文件的内容
$ git show [commit]:[filename] # 显示当前分支的最近几次提交
$ git reflog

八、远程同步
# 下载远程仓库的所有变动
$ git fetch [remote] # 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote] # 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url] # 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch] # 上传本地指定分支到远程仓库
$ git push [remote] [branch] # 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all

九、撤销
# 恢复暂存区的指定文件到工作区
$ git checkout [file] # 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file] # 恢复暂存区的所有文件到工作区
$ git checkout . # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file] # 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit] # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit] # 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit] # 新建一个commit，用来撤销指定commit # 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit] # 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop

&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://lysistic.github.io/2024/02/12/my-first-article/</guid>
            <title>my first article</title>
            <link>https://lysistic.github.io/2024/02/12/my-first-article/</link>
            <pubDate>Mon, 12 Feb 2024 18:14:24 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;this-is-my-first-blog&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#this-is-my-first-blog&#34;&gt;#&lt;/a&gt; This is my first blog.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hello World！&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
